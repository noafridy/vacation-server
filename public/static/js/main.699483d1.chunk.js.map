{"version":3,"sources":["component/Appointment.js","component/AddAppointment.js","component/AllAppointment.js","App.js","serviceWorker.js","index.js"],"names":["Appointment","state","num1","num2","result","this","setState","props","starttime","time","react_default","a","createElement","className","appointment","appointmentname","description","date","Component","AddAppointment","ev","Object","defineProperty","target","name","value","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","status","refresh","onChange","handleChng","bind","allteam","map","t","key","ID","type","onClick","sendData","AllAppointment","temp","_this2","Item","concat","allAppointment","filter","m","component_Appointment","App","rerefreshData","resp1","json","resp","component_AddAppointment","component_AllAppointment","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.699483d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Appointment extends Component {\nstate={\n num1:0,\n num2:0,\n result:0\n}\n\ngetTotaltime(){\n  var num1=this.setState({ num1: (this.props.starttime) });\n  var num2=this.setState({ num2: (this.props.time) });\n   this.setState({result: num1 - num2 })\n\n}\n\n  render() {\n    return (\n      <div className=\"Appointment\">\n\n      <div className=\"card\" >\n          \n            <h5 className=\"card-title\"> {this.props.appointment.appointmentname} </h5>\n            <h5 className=\"card-title\"> {this.props.appointment.description} </h5>\n            <h5  className=\"card-title\">{this.props.appointment.date}</h5>\n            {/* <h5  className=\"card-title\">{this.props.appointment.starttime}</h5>\n            <h5  className=\"card-title\">{this.props.appointment.time}</h5> */}\n            <h5  className=\"card-title\">{this.state.result}</h5>\n            {/* <h5  className=\"card-title\">{this.props.appointment.date}</h5> */}\n       \n\n        </div>\n\n        \n\n      </div>\n\n     \n    );\n  }\n}\n\nexport default Appointment;\n","import React, { Component } from 'react';\n\n//import './App.css';\nimport Appointment from './Appointment';\n\nclass AddAppointment extends Component {\n\n  handleChng(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n  async sendData() {\n    \n    let resp = await fetch('http://localhost:3001/insertData', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    });\n    if (resp.status === 200) {\n      this.props.refresh();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"AddFlower\">\n        <h1> Insert Appointment</h1><br />\n        {/* allteam */}\n        <label className=\"col-form-label col-sm-2 pt-0\"> Make a new appointment: </label>\n        <select name=\"teamname\" onChange={this.handleChng.bind(this)}  >\n          <option>select team</option>\n          {this.props.allteam.map((t) => <option key={t.ID} value={t.ID} >{t.name} </option>)}\n        </select><br />\n\n        <from>\n          <label className=\"col-sm-2 col-form-label\"> appointment name: </label>\n          <input name=\"appointmentname\" onChange={this.handleChng.bind(this)} /><br />\n\n          <label className=\"col-sm-2 col-form-label\">  description: </label>\n          <input name=\"description\" onChange={this.handleChng.bind(this)} /><br />\n\n          <label className=\"col-sm-2 col-form-label\">  start time: </label>\n          <input name=\"starttime\" onChange={this.handleChng.bind(this)} /><br />\n\n          <label className=\"col-sm-2 col-form-label\"> Estimated time: </label>\n          <select name=\"time\" onChange={this.handleChng.bind(this)} >\n            {/* option select is only for the sake of uniformity of the form */}\n            {/* <option>select estimated time</option> */}\n            <option key=\"1\" value=\"30\">30</option>\n            <option key=\"2\" value=\"60\">60</option>\n            <option key=\"3\" value=\"120\">120</option>\n          </select><br />\n\n          <label className=\"col-sm-2 col-form-label\">  date: </label>\n          <input name=\"date\" type=\"date\" onChange={this.handleChng.bind(this)} /><br />\n\n          <button onClick={this.sendData.bind(this)}  > Make appoinment </button>\n\n        </from>\n\n      </div>\n    );\n  }\n}\n\nexport default AddAppointment;\n","import React, { Component } from 'react';\nimport Appointment from './Appointment';\n\n//import './App.css';\n\nclass AllAppointment extends Component {\n\nstate={\n  temp:0\n}\n\n// getfilter(){\n//   this.setState({temp:teamname1});\n// }\n\n\n  render() {\n    return (\n      <div className=\"All\">\n        <h1> All Appointment </h1>\n        {/* onChange={this.handleChng.bind(this)}  */}\n        {/* allteam */}\n        <select name=\"teamname1\"  >\n          <option>select team</option>\n          {this.props.allteam.map((t) => <option key={t.ID} value={t.ID} >{t.name} </option>)}\n        </select><br />\n\n        {this.props.allteam.map(Item => {\n          const appointment = Item.name;\n          return (\n            <section className=\"appointment-section\">\n              <div className=\"section-title\">{`${appointment}:`}</div>\n              <div className=\"cards-section\">\n                {this.props.allAppointment.filter(m => m.name === appointment).map(m => {\n                  return <Appointment refresh={this.props.refresh} key={m.ID} appointment={m} />\n                })}\n              </div>\n            </section>\n          );\n        })}\n\n\n\n        {/* <div className=\"AllAppointment\">\n          {this.props.allAppointment.map((a) => <Appointment refresh={this.props.refresh} key={a.ID} appointment={a} />)}\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default AllAppointment;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n//import flowerImage from './flowerImage.jpeg';\nimport './App.css';\nimport AddAppointment from './component/AddAppointment';\nimport AllAppointment from './component/AllAppointment';\n\nclass App extends Component {\n  state={\n    allAppointment:[],\n    allteam: []\n  }\n\n  async componentDidMount() {\n    this.rerefreshData();\n    let resp1 = await fetch('http://localhost:3001/allteam');\n    let allteam = await resp1.json();\n    this.setState({ allteam });\n  }\n\n  async rerefreshData() {\n    let resp = await fetch('http://localhost:3001/showappointment');\n    let allAppointment = await resp.json(); \n    this.setState({allAppointment:allAppointment});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <AddAppointment  allteam={this.state.allteam} refresh={this.rerefreshData.bind(this)} />\n      <AllAppointment allteam={this.state.allteam} allAppointment={this.state.allAppointment} refresh={this.rerefreshData.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}